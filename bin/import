#!/usr/bin/perl

use strict;
use Data::Dumper;
use File::Copy;
use FindBin;
use File::Basename;
use lib "$FindBin::Bin/../lib/perl";
use RnaSeqHandlerCommon;

usage() unless scalar(@ARGV) == 2;
my ($inputDir, $outputDir) = @ARGV;

unlink("$inputDir/vdi-meta.json");

opendir(my $dh, $outputDir) or die "can't open dir '$outputDir'\n";;
my $numOutputFiles = () = readdir($dh);
die "Output dir '$outputDir' must be empty\n" if $numOutputFiles != 2; # . and .. are always present
close($dh);

validationError("Missing required file: '$MANIFEST_FILE'") unless -e "$inputDir/$MANIFEST_FILE";
copy("$inputDir/$MANIFEST_FILE", "$outputDir/$MANIFEST_FILE") || die "failed copying manifest file '$inputDir/$MANIFEST_FILE' to '$outputDir/$MANIFEST_FILE': $!\n";

open(my $fh, "$inputDir/$MANIFEST_FILE") or die "Can't open '$inputDir/$MANIFEST_FILE'\n";
my @lines = readAndValidateManifestLine($fh, $inputDir);

validateAndCopyFiles($fh, \@lines, $inputDir);

# there should now be the same number of files in inputDir and outputDir.  If not, there were input files not listed in manifest.
opendir($dh, $inputDir) or die "can't open dir '$inputDir'\n";
my $numInputFiles = () = readdir($dh);
close($dh);
opendir($dh, $outputDir) or die "can't open dir '$outputDir'\n";;
my $numOutputFiles = () = readdir($dh);
validationError("Files and manifest do not agree.  Wrong number of files") unless $numInputFiles == $numOutputFiles;

############################################################################################################

sub usage {
  die "
Usage: import input_dir output_dir

Prepare and validate an Rna Seq dataset for import.

input_dir: must contain the original dataset files, and no other files.
output_dir: will contain the import-ready set of files.  In this case, the same as input.

input_dir will contain:
  $MANIFEST_FILE file with one line per file:
      SAMPLENAME FILENAME STRAND

  there will be one or more samples.  STRAND must be 'unstranded'.  (No longer support 'stranded')

  FILENAME validation rules:
      - only files with .bw or .txt extension are allowed
      - a given SAMPLENAME can have zero or one of each of those extensions

If there is a validation error, exit with status $VALIDATION_ERROR_CODE.  STDOUT will contain the user-appropriate validation error message
";
}

sub validateAndCopyFiles {
  my ($fh, $firstLine, $inputDir) = @_;

  my $samples = {};
  my $fileNames = {};
  my $sampleNames = [];

  my ($sampleName, $filename, $strandInfo) = @$firstLine;

  # read manifest file, and process each line
  do {
    validationError("Unsupported strand info in manifest column 3: '$strandInfo'") unless $strandInfo eq 'unstranded';

    # confirm valid extension.  ensure uniqueness.  validate text file.  (we don't validate .bw file)
    my $extension = validateDataFileName($filename);
    validationError("Sample '$sampleName' with '$extension' repeated in manifest") if $samples->{$sampleName}->{$extension};
    $samples->{$sampleName}->{$extension} = 1;

    # ensure file uniqueness
    my $baseFile = basename($filename);
    validationError("Repeated file name '$baseFile'") if $fileNames->{$filename};
    $fileNames->{$filename} = 1;

    # copy data file to output dir (and clean file name)
    copyDataFile($filename);

  } while(($sampleName, $filename) = readAndValidateManifestLine($fh, $inputDir));
}

sub validateDataFileName {
  my ($filename) = @_;

  # confirm valid extension.  ensure uniqueness.  validate text file.  (we don't validate .bw file)
  $filename =~ /.*\.(bw|txt)$/ or validationError("Invalid file name '$filename'.  Must have .bw or .txt extension");
  my $extension = $1;
  validateTextFile("$inputDir/$filename") if ($extension eq 'txt');
  return $extension;
}

# copy file from inputDir to outputDir (and clean file name)
sub copyDataFile {
  my ($dataFile) = @_;
  my $out = $dataFile;
  my $out =~ s/[^\.-\w]/_/g;  # replace icky chars with underscore
  copy("$inputDir/$dataFile", "$outputDir/$out");
}

sub validateTextFile {
  my ($filename) = @_;

  open(DATA, $filename) or die "Cannot open file '$filename' for reading: $!\n";
  my $baseFile = basename($filename);
  # check header to distinguish file type
  my $columnCount;
  my $header = <DATA>;
  chomp($header);

  if ($header =~ /tracking_id\tclass_code\tnearest_ref_id\t(?:gene_id|Gene ID)\tgene_short_name\ttss_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status/) {
    # Cufflinks FPKM file
    $columnCount = 13
  } elsif ($header =~ /(?:gene_id|Gene ID)\tFPKM/) {
    # FPKMtool file
    $columnCount = 2;
  } elsif ($header =~ /(?:gene_id|Gene ID)\tTPM/) {
    # TPMtool file
    $columnCount = 2;
  } else {
    validationError("Unrecognized header record. Not a valid transcript abundance file. Must have 'gene_id' in the first column and either 'FPKM' or 'TPM' in the second column, or, for a cufflinks file, have FPKM in the 10th column. File: $baseFile");
  }

  my $linenum = 1;
  while (<DATA>) {
    $linenum++;
    chomp;
    my @a = split(/\t/);
    validationError("Invalid row in file '$baseFile' line $linenum.  Wrong number of fields.  Expected $columnCount.")
      unless scalar(@a) == $columnCount;
  }
}

