#!/usr/bin/perl

use strict;
use Data::Dumper;
use File::Copy;
use FindBin;
use File::Basename;
use lib "$FindBin::Bin/../lib/perl";
use RnaSeqHandlerCommon;
use Scalar::Util qw(looks_like_number);

usage() unless scalar(@ARGV) == 2;
my ($inputDir, $outputDir) = @ARGV;

unlink("$inputDir/vdi-meta.json");

opendir(my $dh, $outputDir) or die "can't open dir '$outputDir'\n";;
my $numOutputFiles = () = readdir($dh);
die "Output dir '$outputDir' must be empty\n" if $numOutputFiles != 2; # . and .. are always present
close($dh);

validationError("Missing required file: '$MANIFEST_FILE'") unless -e "$inputDir/$MANIFEST_FILE";
copy("$inputDir/$MANIFEST_FILE", "$outputDir/$MANIFEST_FILE") || die "failed copying manifest file '$inputDir/$MANIFEST_FILE' to '$outputDir/$MANIFEST_FILE': $!\n";

my $cmd = "dos2unix $outputDir/$MANIFEST_FILE";
system($cmd) && die "Failed running '$cmd': $!";

open(my $fh, "$outputDir/$MANIFEST_FILE") or die "Can't open '$outputDir/$MANIFEST_FILE'\n";
my @lines = readAndValidateManifestLine($fh, $inputDir);

validateAndCopyFiles($fh, \@lines, $inputDir, $outputDir);

# there should now be the same number of files in inputDir and outputDir.  If not, there were input files not listed in manifest.
opendir($dh, $inputDir) or die "can't open dir '$inputDir'\n";
my $numInputFiles = () = readdir($dh);
close($dh);
opendir($dh, $outputDir) or die "can't open dir '$outputDir'\n";;
my $numOutputFiles = () = readdir($dh);
validationError("Files and manifest do not agree.  Wrong number of files.  There should be one row per file.") unless $numInputFiles == $numOutputFiles;

############################################################################################################

sub usage {
  die "
Usage: import input_dir output_dir

Prepare and validate an Rna Seq dataset for import.

input_dir: must contain the original dataset files, and no other files.
output_dir: will contain the import-ready set of files.  In this case, the same as input.

input_dir will contain:
  $MANIFEST_FILE file with one line per file
  bigwig files (optional)
  counts files

validation rules:
 - allow windows newlines in manifest and counts files
 - manifest must have a row for every file
 - the manifest file has these columns:
   - sample name
   - file name (either bigwig or counts)
   - strand.  this is optional.  if provided must be 'unstranded'
 - for bigwig files, allow .bw and .bigwig
 - if a data file does not have a .bw or .bigwig extension, it is assumed to be a counts file
 - the counts file requires a header, but we don't validate the names
 - the counts file has two columns:
   - gene id (1st column)
   - count (second column)  - this must be a floating point number

If there is a validation error, exit with status $VALIDATION_ERROR_CODE.  STDOUT will contain the user-appropriate validation error message
";
}

sub validateAndCopyFiles {
  my ($fh, $firstLine, $inputDir, $outputFir) = @_;

  my $samples = {};
  my $fileNames = {};
  my $sampleNames = [];

  my ($sampleName, $filename, $strandInfo) = @$firstLine;


  # read manifest file, and process each line
  do {
    # copy data file to output dir (and clean newlines and file name)
    my $cleanedFilePath = copyDataFile($filename, $inputDir, $outputFir);

    # confirm valid extension.  ensure uniqueness.  validate text file.  (we don't validate .bw file)
    my $type = validateDataFileName($cleanedFilePath);  # either bw or txt
    validationError("Sample '$sampleName' with '$type' repeated in manifest.txt") if $samples->{$sampleName}->{$type};
    $samples->{$sampleName}->{$type} = 1;

    # ensure file uniqueness
    my $baseFile = basename($filename);
    validationError("Repeated file name '$baseFile' in manifest.txt") if $fileNames->{$filename};
    $fileNames->{$filename} = 1;

  } while(($sampleName, $filename) = readAndValidateManifestLine($fh, $inputDir));
}

sub validateDataFileName {
  my ($filename) = @_;

  # confirm valid extension.  ensure uniqueness.  validate text file.  (we don't validate .bw file)
  my $type = ($filename =~ /.*\.(bw|bigwig)$/)? 'bw' : 'txt';
  validateTextFile($filename) if ($type eq 'txt');
  return $type;
}

# copy file from inputDir to outputDir (and clean file name)
sub copyDataFile {
  my ($dataFile, $inputDir, $outputDir) = @_;

  my $out = $dataFile;
  $out =~ s/[^\.-\w]/_/g;  # replace icky chars with underscore
  copy("$inputDir/$dataFile", "$outputDir/$out");
  if ($out !~ /\.bw$/ && $out !~ /\.bigwig$/) {
    my $cmd = "dos2unix $outputDir/$out";
    system($cmd) && die "Failed to run $cmd: $!";
  }
  return "$outputDir/$out";
}

sub validateTextFile {
  my ($filename) = @_;

  open(DATA, $filename) or die "Cannot open file '$filename' for reading: $!\n";
  my $baseFile = basename($filename);
  # check header to distinguish file type
  my $columnCount;
  my $header = <DATA>;
  chomp($header);

  # support cufflinks format for legacy datasets.
  if ($header =~ /^tracking_id\tclass_code\tnearest_ref_id\t(?:gene_id|Gene ID)\tgene_short_name\ttss_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status$/) {
    # Cufflinks FPKM file
    $columnCount = 13
  } else {
    my @cols = split(/\t/, $header);
    validationError("Wrong number of columns in file '$baseFile'.  Must be two columns (gene id and count), tab delimited") unless scalar(@cols) == 2;
    validationError("First row of file '$baseFile' must be textual column headings, eg, Gene ID and TPM") if looks_like_number($cols[0]) || looks_like_number($cols[1]);
    $columnCount = 2;
  }

  my $linenum = 1;
  while (<DATA>) {
    $linenum++;
    chomp;
    my @a = split(/\t/);
    validationError("Invalid row in file '$baseFile' line $linenum.  Wrong number of fields.  Expected $columnCount.")
      unless scalar(@a) == $columnCount;
    if ($columnCount == 2) {
      validationError("In file '$baseFile' line $linenum, first column should be an ID.") if looks_like_number($a[0]);
      validationError("In file '$baseFile' line $linenum, second column should be a floating point normalized value.")
	unless $a[1] =~ /\d+\.\d+/;
    }
  }
} 
